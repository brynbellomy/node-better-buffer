// Generated by CoffeeScript 1.3.1
var Buffer,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Buffer = require("buffer").Buffer;

exports.BetterBuffer = (function(_super) {

  __extends(BetterBuffer, _super);

  BetterBuffer.name = 'BetterBuffer';

  BetterBuffer.prototype.growSize = 512;

  BetterBuffer.prototype.dataLength = 0;

  function BetterBuffer(initialSize, _growSize) {
    this.popFront = __bind(this.popFront, this);

    this.cloneDataIntoNewBuffer = __bind(this.cloneDataIntoNewBuffer, this);

    this.pushBack = __bind(this.pushBack, this);

    this.growToAccommodate = __bind(this.growToAccommodate, this);

    this.getNextSmallestBufferSize = __bind(this.getNextSmallestBufferSize, this);
    Buffer.call(this, initialSize);
    if (_growSize != null) {
      this.growSize = _growSize;
    }
  }

  BetterBuffer.prototype.getNextSmallestBufferSize = function(dataLengthToAccommodate) {
    return this.growSize * (Math.floor(dataLengthToAccommodate / this.growSize) + 1);
  };

  BetterBuffer.prototype.growToAccommodate = function(dataLengthToAccommodate) {
    var expandedBuffer, newSize;
    if (dataLengthToAccommodate > this.length) {
      newSize = this.getNextSmallestBufferSize(dataLengthToAccommodate);
      expandedBuffer = new BetterBuffer(newSize);
      this.copy(expandedBuffer);
      BetterBuffer.call(this, newSize, this.growSize);
      expandedBuffer.copy(this);
    }
    return this;
  };

  BetterBuffer.prototype.pushBack = function(sourceBuffer) {
    sourceBuffer.copy(this, this.dataLength);
    this.dataLength = Math.min(this.length, this.dataLength + sourceBuffer.length);
    return this.dataLength;
  };

  BetterBuffer.prototype.cloneDataIntoNewBuffer = function() {
    var outBuffer;
    outBuffer = new Buffer(this.dataLength);
    this.copy(outBuffer, 0, 0, this.dataLength);
    return outBuffer;
  };

  BetterBuffer.prototype.popFront = function(num) {
    var meBuffer, newDataLength, newSize, outBuffer;
    newSize = this.length - num;
    outBuffer = new Buffer(num);
    meBuffer = new Buffer(newSize);
    newDataLength = Math.max(0, this.dataLength - num);
    this.copy(outBuffer, 0, 0, num);
    this.copy(meBuffer, 0, num, this.length);
    BetterBuffer.call(this, newSize, this.growSize);
    meBuffer.copy(this);
    this.dataLength = newDataLength;
    return outBuffer;
  };

  return BetterBuffer;

})(Buffer);
